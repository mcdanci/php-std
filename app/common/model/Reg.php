<?php
/**
 * @copyright since 17:46 14/12/2017
 * @author <mc@dancis.info>
 */
namespace app\common\model;

use McDanci\ThinkPHP\Config;
use McDanci\ThinkPHP\Model;
use traits\model\SoftDelete;

/**
 * Class Reg
 * @package app\common\model
 * @method static \app\common\model\Reg getByStatus (int $status)
 */
class Reg extends Model
{
    use SoftDelete;

    //region Configuration

    const
        STATUS_UNAUDITED = 1,
        STATUS_PASSED = 2,
        STATUS_DECLINED = 3;

    protected
        $autoWriteTimestamp = 'datetime',
        $createTime = 'created',
        $updateTime = false,
        $deleteTime = 'deleted';

    protected $readonly = [
        'created',

        'type',
        'name_first',
        'name_last',
        'gender',
        'email',
        'tel',
        'tel_cell',
        'company',
        'street',
        'city',
        'state',
        'zip',
        'iso3166',
        'website',
        'cat',
        'password',
    ];

    public static $rangeStatus = [
        self::STATUS_UNAUDITED,
        self::STATUS_PASSED,
        self::STATUS_DECLINED,
    ];

    //endregion

    //region Relation

    private static function bindCN($name, $roleType = 1)
    {
        if (in_array($roleType, [1,2])) {
            return ($roleType === 1 ? 'exhibitor' : 'visitor') . '_' . $name;
        }

        return false;
    }

    private static function bindMap(&$bindList, $roleType = 1)
    {
        $bind = [];
        foreach ($bindList as &$bindColumn) {
            $bind[self::bindCN($bindColumn, $roleType)] = $bindColumn;
        }
        $bindList = $bind;
    }

    public function regExhibitor()
    {
        $bindList = [
            'c_opf',
            'mpt',
            'npe',
            'mc',
            'tse',
        ];

        self::bindMap($bindList);
        return $this->hasOne('RegExhibitor')->bind($bindList);
    }

    public function regVisitor()
    {
        $bindList = [
            'job_function',
            'brand',
            'f_man',
        ];

        self::bindMap($bindList, 2);
        return $this->hasOne('RegVisitor')->bind($bindList);
    }

    //endregion

    //region Getter

    /**
     * Getter for type of role.
     * @param $value
     * @return mixed
     */
    public function getTypeAttr($value)
    {
        static $MAP = [
            null,
            'exhibitor',
            'visitor',
            'admin',
        ];
        return $MAP[$value];
    }

    public function getGenderAttr($value)
    {
        static $MAP = [
            null,
            'Mrs.',
            'Mr.',
            'Ms.',
        ];
        return $MAP[$value];
    }

    public function getStatusAttr($value)
    {
        static $MAP = [
            1 => 'unaudited',
            2 => 'passed',
            3 => 'declined',
        ];
        return $MAP[$value];
    }

    //endregion

    /**
     * @todo
     */
    protected static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Config::set('');
    }

    /**
     * @todo
     */
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @todo
     */
    public function auditPass($id)
    {
        //self::destroy('');
        //self::delete('');
    }
}
